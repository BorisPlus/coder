# automatically generated by the FlatBuffers compiler, do not modify

# namespace: params

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Params(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Params()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsParams(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Params
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Params
    def Number(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Params
    def String(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Params
    def RawBytes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # Params
    def RawBytesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int8Flags, o)
        return 0

    # Params
    def RawBytesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Params
    def RawBytesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def ParamsStart(builder):
    builder.StartObject(3)

def Start(builder):
    ParamsStart(builder)

def ParamsAddNumber(builder, number):
    builder.PrependInt32Slot(0, number, 0)

def AddNumber(builder, number):
    ParamsAddNumber(builder, number)

def ParamsAddString(builder, string):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(string), 0)

def AddString(builder, string):
    ParamsAddString(builder, string)

def ParamsAddRawBytes(builder, rawBytes):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(rawBytes), 0)

def AddRawBytes(builder, rawBytes):
    ParamsAddRawBytes(builder, rawBytes)

def ParamsStartRawBytesVector(builder, numElems):
    return builder.StartVector(1, numElems, 1)

def StartRawBytesVector(builder, numElems):
    return ParamsStartRawBytesVector(builder, numElems)

def ParamsEnd(builder):
    return builder.EndObject()

def End(builder):
    return ParamsEnd(builder)
